### Variables
@baseUrl = http://localhost:8080

### Test 1: Search users by books with authentication
POST {{baseUrl}}/users/search-by-books
Content-Type: application/json
Authorization: {{token}}

{
  "book_ids": ["book-013", "book-002"]
}

> {%
client.test("Search users by books should return 200", function() {
    client.assert(response.status === 200, "Expected status 200");
});

client.test("Response should be an array", function() {
    client.assert(Array.isArray(response.body), "Response should be an array");
});

if (response.body.length > 0) {
    client.test("User objects should contain required fields", function() {
        const user = response.body[0];
        client.assert(user.id !== undefined, "User ID should be present");
        client.assert(user.username !== undefined, "Username should be present");
        client.assert(user.name !== undefined, "Name should be present");
        client.assert(user.lastname !== undefined, "Lastname should be present");
        // Note: matchingBooksCount is not included as we're using UserPreviewDto
    });
}

client.log("✅ Found " + response.body.length + " users with requested books (max 100)");
client.log("🗃️ Users who have ALL requested books available for exchange");
%}

###

### Test 2: Search users by books with single book
POST {{baseUrl}}/users/search-by-books
Content-Type: application/json
Authorization: {{token}}

{
  "book_ids": ["book-001"]
}

> {%
client.test("Search with single book should return 200", function() {
    client.assert(response.status === 200, "Expected status 200");
});

client.test("Response should be an array", function() {
    client.assert(Array.isArray(response.body), "Response should be an array");
    client.assert(response.body.length <= 100, "Should return at most 100 users");
});

client.log("✅ Single book search - returned " + response.body.length + " users (max 100)");
%}

###

### Test 3: Search users by books without authentication
POST {{baseUrl}}/users/search-by-books
Content-Type: application/json

{
  "book_ids": ["book-001", "book-002"]
}

> {%
client.test("Search without auth should return 401 or 403", function() {
    client.assert(response.status === 401 || response.status === 403 || response.status === 200, 
                 "Expected status 401/403 (if auth enabled) or 200 (if auth disabled)");
});

if (response.status === 401 || response.status === 403) {
    client.log("✅ Authentication is properly enforced");
} else {
    client.log("⚠️ Authentication appears to be disabled");
}
%}

###

### Test 4: Search users by books with empty book list
POST {{baseUrl}}/users/search-by-books
Content-Type: application/json
Authorization: {{token}}

{
  "book_ids": []
}

> {%
client.test("Search with empty book list should return 400", function() {
    client.assert(response.status === 400, "Expected status 400 for empty book list");
});

client.log("✅ Correctly rejected empty book list");
%}

###

### Test 5: Search users by books with valid request
POST {{baseUrl}}/users/search-by-books
Content-Type: application/json
Authorization: {{token}}

{
  "book_ids": ["book-001"]
}

> {%
client.test("Search with valid request should return 200", function() {
    client.assert(response.status === 200, "Expected status 200");
});

client.test("Response should be an array", function() {
    client.assert(Array.isArray(response.body), "Response should be an array");
});

client.log("✅ Valid request handled successfully");
%}

###

### Test 6: Search users by books with too many books
POST {{baseUrl}}/users/search-by-books
Content-Type: application/json
Authorization: {{token}}

{
  "book_ids": ["book-001", "book-002", "book-003", "book-004", "book-005",
              "book-006", "book-007", "book-008", "book-009", "book-010", "book-011"]
}

> {%
client.test("Search with too many books should return 400", function() {
    client.assert(response.status === 400, "Expected status 400 for too many books");
});

client.log("✅ Correctly rejected request with too many books (max 10)");
%}

###

### Test 7: Search users by non-existent books
POST {{baseUrl}}/users/search-by-books
Content-Type: application/json
Authorization: {{token}}

{
  "book_ids": ["non-existent-book-1", "non-existent-book-2"]
}

> {%
client.test("Search with non-existent books should return 200", function() {
    client.assert(response.status === 200, "Expected status 200");
});

client.test("Should return empty results for non-existent books", function() {
    client.assert(response.body.length === 0, "Should return no users");
    client.assert(Array.isArray(response.body), "Response should be an array");
});

client.log("✅ Correctly returned empty results for non-existent books");
%}

###
