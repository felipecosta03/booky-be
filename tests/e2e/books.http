### Variables
@baseUrl = http://localhost:8080
@userId = user-004
@bookId = 550e8400-e29b-41d4-a716-446655440001
@isbn = 9781234567890

### Test 1: Search books by query
GET {{baseUrl}}/books/search?q=Harry Potter
Authorization: {{token}}

> {%
client.test("Search books should return 200", function() {
    client.assert(response.status === 200, "Expected status 200");
});

client.test("Response should be an array", function() {
    client.assert(Array.isArray(response.body), "Response should be an array");
});
%}

###

### Test 2: Search books by author
GET {{baseUrl}}/books/search?q=J.K. Rowling
Authorization: {{token}}

> {%
client.test("Search books by author should return 200", function() {
    client.assert(response.status === 200, "Expected status 200");
});

client.test("Response should be an array", function() {
    client.assert(Array.isArray(response.body), "Response should be an array");
});
%}

###

### Test 3: Get book by ISBN
GET {{baseUrl}}/books/isbn/{{isbn}}
Authorization: {{token}}

> {%
client.test("Get book by ISBN should return 200 or 404", function() {
    client.assert(response.status === 200 || response.status === 404, "Expected status 200 or 404");
});

if (response.status === 200) {
    client.test("Response should contain book data", function() {
        client.assert(response.body.title !== undefined, "Title should be present");
    });
}
%}

###

### Test 4: Add book to user library
POST {{baseUrl}}/books/library
Content-Type: application/json
Authorization: {{token}}

{
  "isbn": "{{isbn}}",
  "status": "TO_READ"
}

> {%
client.test("Add book to library should return 200 or 409", function() {
    client.assert(response.status === 200 || response.status === 409, "Expected status 200 or 409 (if already exists)");
});

if (response.status === 200) {
    client.test("Response should contain user book data", function() {
        client.assert(response.body.id !== undefined, "UserBook ID should be present");
        client.assert(response.body.status === "TO_READ", "Status should match");
    });
    
    client.global.set("userBookId", response.body.id);
}
%}

###

### Test 5: Get user library (all books)
GET {{baseUrl}}/books/library/{{userId}}
Authorization: {{token}}

> {%
client.test("Get user library should return 200", function() {
    client.assert(response.status === 200, "Expected status 200");
});

client.test("Response should be an array", function() {
    client.assert(Array.isArray(response.body), "Response should be an array");
});
%}

###

### Test 6: Get user favorite books
GET {{baseUrl}}/books/library/{{userId}}?favorites=true
Authorization: {{token}}

> {%
client.test("Get user favorites should return 200", function() {
    client.assert(response.status === 200, "Expected status 200");
});

client.test("Response should be an array", function() {
    client.assert(Array.isArray(response.body), "Response should be an array");
});
%}

###

### Test 6.1: Get user books by status
GET {{baseUrl}}/books/library/{{userId}}?status=READING
Authorization: {{token}}

> {%
client.test("Get books by status should return 200", function() {
    client.assert(response.status === 200, "Expected status 200");
});

client.test("Response should be an array", function() {
    client.assert(Array.isArray(response.body), "Response should be an array");
});
%}

###

### Test 6.2: Get user favorite books that are being read
GET {{baseUrl}}/books/library/{{userId}}?favorites=true&status=READING
Authorization: {{token}}

> {%
client.test("Get favorite books being read should return 200", function() {
    client.assert(response.status === 200, "Expected status 200");
});

client.test("Response should be an array", function() {
    client.assert(Array.isArray(response.body), "Response should be an array");
});
%}

###

### Test 7: Get books for exchange
GET {{baseUrl}}/books/exchange
Authorization: {{token}}

> {%
client.test("Get books for exchange should return 200", function() {
    client.assert(response.status === 200, "Expected status 200");
});

client.test("Response should be an array", function() {
    client.assert(Array.isArray(response.body), "Response should be an array");
});
%}

###

### Test 8: Update book status
PUT {{baseUrl}}/books/{{bookId}}/status
Content-Type: application/json
Authorization: {{token}}

{
  "status": "READING"
}

> {%
client.test("Update book status should return 200 or 404", function() {
    client.assert(response.status === 200 || response.status === 404, "Expected status 200 or 404");
});

if (response.status === 200) {
    client.test("Response should contain updated status", function() {
        client.assert(response.body.status === "READING", "Status should be updated");
    });
}
%}

###

### Test 9: Update exchange preference
PUT {{baseUrl}}/books/{{bookId}}/exchange
Content-Type: application/json
Authorization: {{token}}

{
  "wants_to_exchange": false
}

> {%
client.test("Update exchange preference should return 200 or 404", function() {
    client.assert(response.status === 200 || response.status === 404, "Expected status 200 or 404");
});

if (response.status === 200) {
    client.test("Response should contain updated preference", function() {
        client.assert(response.body.wants_to_exchange === false, "Exchange preference should be updated");
    });
}
%}

###

### Test 10: Toggle book favorite
PUT {{baseUrl}}/books/{{bookId}}/favorite
Authorization: {{token}}

> {%
client.test("Toggle favorite should return 200 or 404", function() {
    client.assert(response.status === 200 || response.status === 404, "Expected status 200 or 404");
});

if (response.status === 200) {
    client.test("Response should contain favorite status", function() {
        client.assert(response.body.favorite !== undefined, "Favorite status should be present");
    });
}
%}

###

### Test 11: Search books with empty query
GET {{baseUrl}}/books/search?q=
Authorization: {{token}}

> {%
client.test("Search with empty query should return 400 or 200", function() {
    client.assert(response.status === 400 || response.status === 200, "Expected status 400 or 200");
});
%}

###

### Test 12: Add book with invalid ISBN
POST {{baseUrl}}/books/library
Content-Type: application/json
Authorization: {{token}}

{
  "isbn": "invalid-isbn",
  "status": "TO_READ"
}

> {%
client.test("Add invalid book should return 400 or 404", function() {
    client.assert(response.status === 400 || response.status === 404, "Expected status 400 or 404");
});
%}

###

### Test 13: Update book status with invalid status
PUT {{baseUrl}}/books/{{bookId}}/status
Content-Type: application/json
Authorization: {{token}}

{
  "status": "INVALID_STATUS"
}

> {%
client.test("Update with invalid status should return 400", function() {
    client.assert(response.status === 400, "Expected status 400");
});
%}

###

### Test 14: Get books without authentication
GET {{baseUrl}}/books/search?q=test

> {%
client.test("Search without auth should return 403or 200", function() {
    client.assert(response.status === 403 || response.status === 200, "Expected status 403 (if auth enabled) or 200 (if auth disabled)");
});
%}
