name: Deploy to EC2

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: self-hosted
    timeout-minutes: 30
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: System cleanup and verification
      run: |
        echo "=== SYSTEM STATUS ==="
        df -h
        echo "=== DOCKER STATUS ==="
        docker system df
        echo "=== CLEANING UP ==="
        docker system prune -f || true
        docker volume prune -f || true
        echo "=== POST-CLEANUP STATUS ==="
        df -h
      
    - name: Build Docker image
      timeout-minutes: 20
      run: |
        echo "Building Docker image..."
        echo "Cleaning up old build cache..."
        docker builder prune -f || true
        
        echo "Building with progress output..."
        docker build -t bookypfi/booky-backend:latest . \
          --progress=plain \
          --no-cache-filter=build \
          --build-arg BUILDKIT_INLINE_CACHE=1
        
    - name: Deploy with unified Docker Compose
      env:
        # Docker Configuration
        DOCKER_IMAGE: bookypfi/booky-backend:latest
        SPRING_PROFILES_ACTIVE: prod
        # Security Configuration
        SECURITY_ENABLED: true
        JWT_SECRET: ${{ secrets.JWT_SECRET || 'booky-production-secret-key-change-me-in-production' }}
        JWT_EXPIRATION: 86400000
        # Image Storage Configuration
        IMAGE_STORAGE_STRATEGY: ${{ secrets.IMAGE_STORAGE_STRATEGY || 'cloudinary' }}
        # Cloudinary Configuration
        CLOUDINARY_CLOUD_NAME: ${{ secrets.CLOUDINARY_CLOUD_NAME }}
        CLOUDINARY_API_KEY: ${{ secrets.CLOUDINARY_API_KEY }}
        CLOUDINARY_API_SECRET: ${{ secrets.CLOUDINARY_API_SECRET }}
        # AWS S3 Configuration
        AWS_S3_ACCESS_KEY: ${{ secrets.AWS_S3_ACCESS_KEY }}
        AWS_S3_SECRET_KEY: ${{ secrets.AWS_S3_SECRET_KEY }}
        AWS_S3_REGION: ${{ secrets.AWS_S3_REGION || 'us-east-1' }}
        AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET || 'bucket-user-images-store' }}
        AWS_S3_BASE_URL: ${{ secrets.AWS_S3_BASE_URL }}
      run: |
        echo "Stopping current services..."
        docker-compose down --remove-orphans || true
        
        echo "Removing any existing containers with same names..."
        docker rm -f booky-backend booky-postgres booky-adminer || true
        
        echo "Cleaning up networks..."
        docker network prune -f || true
        
        echo "Starting services with production configuration..."
        docker-compose up -d --force-recreate
        
        echo "Waiting for services to be ready..."
        sleep 30
          
    - name: Verify deployment
      run: |
        echo "Waiting for application to start..."
        sleep 15
        
        echo "Checking application health..."
        for i in {1..30}; do
          # Method 1: Check if port 8080 is listening
          if netstat -tuln | grep -q :8080; then
            echo "✅ Port 8080 is listening!"
            
            # Method 2: Try basic HTTP connection
            if curl -s -o /dev/null -w "%{http_code}" http://localhost:8080 | grep -q "200\|404\|302"; then
              echo "✅ Application is responding to HTTP requests!"
              break
            fi
            
            # Method 3: Try common Spring Boot endpoints
            if curl -s http://localhost:8080/ 2>/dev/null | grep -q "Whitelabel\|Welcome\|Error"; then
              echo "✅ Application is serving content!"
              break
            fi
            
            # Method 4: Check if any of your endpoints respond
            if curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/users 2>/dev/null | grep -q "200\|404\|401\|403"; then
              echo "✅ Application endpoints are accessible!"
              break
            fi
          fi
          
          # Method 5: Check container logs for success indicators
          if docker logs booky-backend 2>&1 | grep -q "Started.*Application\|Tomcat started on port"; then
            echo "✅ Application started successfully according to logs!"
            break
          fi
          
          echo "Attempt $i: Application not ready, waiting..."
          sleep 5
        done
        
        echo "=== VERIFICATION DETAILS ==="
        echo "🔍 Port status:"
        netstat -tuln | grep :8080 || echo "Port 8080 not listening"
        
        echo "🔍 HTTP response:"
        curl -s -o /dev/null -w "HTTP Status: %{http_code}" http://localhost:8080 || echo "No HTTP response"
        
        echo "🔍 Container status:"
        docker ps | grep booky
        
        echo "🔍 Recent application logs:"
        docker logs booky-backend --tail 10 2>&1
        
    - name: Cleanup old images
      run: |
        echo "Cleaning up old Docker images..."
        docker image prune -f
        
    - name: Show deployment summary
      run: |
        echo "=== DEPLOYMENT SUMMARY ==="
        echo "✅ Application updated successfully"
        echo "🐘 PostgreSQL: $(docker ps | grep booky-postgres > /dev/null && echo "Running" || echo "Not running")"
        echo "🚀 Application: $(docker ps | grep booky-backend > /dev/null && echo "Running" || echo "Not running")"
        echo "📊 Adminer: $(docker ps | grep booky-adminer > /dev/null && echo "Running" || echo "Not running")"
        echo "🌐 App URL: http://52.15.181.167:8080"
        echo "🔧 Adminer URL: http://52.15.181.167:8081"
        echo "==========================" 