### Variables
@baseUrl = http://localhost:8080
# Usando IDs que sabemos que existen en la base de datos
@userId = 01284fa7-8a1e-463c-8b6c-c4fbaf13ca43
@communityId = comm-001

### Test 1: Create a general post with dynamic data
# Este test crea un post y guarda su ID para usar en tests posteriores
POST {{baseUrl}}/posts
Content-Type: multipart/form-data; boundary=boundary123
Authorization: {{token}}

--boundary123
Content-Disposition: form-data; name="post"
Content-Type: application/json

{
  "body": "Este es un post de prueba general - {{$timestamp}}",
  "community_id": null
}
--boundary123--

> {%
client.test("Create general post should return 201", function() {
    client.assert(response.status === 201, "Expected status 201");
});

client.test("Response should contain post data", function() {
    client.assert(response.body.id !== undefined, "Post ID should be present");
    client.assert(response.body.body !== undefined, "Post body should be present");
    client.assert(response.body.body.includes("Este es un post de prueba general"), "Post body should contain expected text");
    client.assert(response.body.user_id !== undefined, "User ID should be present");
    client.assert(response.body.date_created !== undefined, "Date created should be present");
});

// Guardar el ID del post creado para usar en tests posteriores
client.global.set("testPostId", response.body.id);
client.global.set("testPostBody", response.body.body);
client.log("‚úÖ Post created with ID: " + response.body.id);
%}

###

### Test 2: Create a community post
POST {{baseUrl}}/posts
Content-Type: multipart/form-data; boundary=boundary456
Authorization: {{token}}

--boundary456
Content-Disposition: form-data; name="post"
Content-Type: application/json

{
  "body": "Este es un post para una comunidad espec√≠fica",
  "community_id": "{{communityId}}"
}
--boundary456--

> {%
client.test("Create community post should return 201", function() {
    client.assert(response.status === 201, "Expected status 201");
});

client.test("Response should contain community data", function() {
    client.assert(response.body.community_id != undefined, "Community ID must not be undefined");
});
%}

###

### Test 3: Get post by ID (using ID from Test 1)
GET {{baseUrl}}/posts/{{testPostId}}
Authorization: {{token}}

> {%
client.test("Get post should return 200 or 404", function() {
    client.assert(response.status === 200 || response.status === 404, "Expected status 200 or 404");
});

if (response.status === 200) {
    client.test("Response should contain post data", function() {
        client.assert(response.body.id !== undefined, "Post ID should be present");
        client.assert(response.body.body !== undefined, "Post body should be present");
    });
}
%}

###

### Test 4: Get user feed
GET {{baseUrl}}/posts?type=feed
Authorization: {{token}}

> {%
client.test("Get user feed should return 200", function() {
    client.assert(response.status === 200, "Expected status 200");
});

client.test("Response should be an array", function() {
    client.assert(Array.isArray(response.body), "Response should be an array");
});
%}

###

### Test 5: Get posts by user ID
GET {{baseUrl}}/posts?userId={{userId}}
Authorization: {{token}}

> {%
client.test("Get posts by user should return 200", function() {
    client.assert(response.status === 200, "Expected status 200");
});

client.test("Response should be an array", function() {
    client.assert(Array.isArray(response.body), "Response should be an array");
});
%}

###

### Test 6: Get posts by community ID
GET {{baseUrl}}/posts?communityId={{communityId}}
Authorization: {{token}}

> {%
client.test("Get posts by community should return 200", function() {
    client.assert(response.status === 200, "Expected status 200");
});

client.test("Response should be an array", function() {
    client.assert(Array.isArray(response.body), "Response should be an array");
});
%}

###

### Test 7: Get general posts
GET {{baseUrl}}/posts?type=general
Authorization: {{token}}

> {%
client.test("Get general posts should return 200", function() {
    client.assert(response.status === 200, "Expected status 200");
});

client.test("Response should be an array", function() {
    client.assert(Array.isArray(response.body), "Response should be an array");
});
%}

###



### Test 8: Verify created post exists before tests end
GET {{baseUrl}}/posts/{{testPostId}}
Authorization: {{token}}

> {%
client.test("Get created post should return 200", function() {
    client.assert(response.status === 200, "Expected status 200");
});

if (response.status === 200) {
    client.test("Response should contain the created post", function() {
        client.assert(response.body.id === client.global.get("testPostId"), "Post ID should match");
        client.assert(response.body.body !== undefined, "Post body should be present");
        client.assert(response.body.user_id !== undefined, "User ID should be present");
    });
    
    client.log("‚úÖ Post verified before cleanup: " + response.body.body.substring(0, 50) + "...");
}
%}

###

### Test 9: Update post content (using ID from Test 1)
PUT {{baseUrl}}/posts/{{testPostId}}
Content-Type: application/json
Authorization: {{token}}

{
  "body": "Contenido actualizado del post - {{$timestamp}}",
  "community_id": null
}

> {%
client.test("Update post should return 200 or 404", function() {
    client.assert(response.status === 200 || response.status === 404, "Expected status 200 or 404");
});

if (response.status === 200) {
    client.test("Response should contain updated data", function() {
        client.assert(response.body.body.includes("Contenido actualizado del post"), "Post body should be updated");
    });
    
    client.log("‚úÖ Post successfully updated");
}
%}

###

### Test 10: Create post without authentication (when security is enabled)
POST {{baseUrl}}/posts
Content-Type: multipart/form-data; boundary=boundary789
# Intencionalmente sin Authorization header

--boundary789
Content-Disposition: form-data; name="post"
Content-Type: application/json

{
  "body": "Post sin autenticaci√≥n",
  "community_id": null
}
--boundary789--

> {%
client.test("Post without auth should return 401 or 403 or 201", function() {
    client.assert(response.status === 401 || response.status === 403 || response.status === 201, 
                 "Expected status 401/403 (if auth enabled) or 201 (if auth disabled)");
});

client.log("üîí Verified: Post creation authentication requirement");
%}

###

### Test 11: Create post with invalid data
POST {{baseUrl}}/posts
Content-Type: multipart/form-data; boundary=boundary999
Authorization: {{token}}

--boundary999
Content-Disposition: form-data; name="post"
Content-Type: application/json

{
  "body": "",
  "community_id": "invalid-community-id"
}
--boundary999--

> {%
client.test("Create post with invalid data should return 400", function() {
    client.assert(response.status === 400 || response.status === 201, "Expected status 400 for invalid data or 201 if validation passes");
});
%}

###

### Test 12: CLEANUP - Delete created post
DELETE {{baseUrl}}/posts/{{testPostId}}
Authorization: {{token}}

> {%
client.test("Delete post should return 204 or 404", function() {
    client.assert(response.status === 204 || response.status === 404 || response.status === 403, 
                 "Expected status 204 (deleted), 404 (not found), or 403 (forbidden)");
});

if (response.status === 204) {
    client.log("‚úÖ Post successfully deleted: " + client.global.get("testPostBody"));
    client.test("Post deletion successful", function() {
        client.assert(true, "Post deleted successfully");
    });
} else if (response.status === 403) {
    client.log("‚ö†Ô∏è Delete forbidden - post will remain: " + client.global.get("testPostBody"));
} else if (response.status === 404) {
    client.log("‚ö†Ô∏è Could not delete post (not found): " + client.global.get("testPostBody"));
}

// Clear global variables
client.global.clear("testPostId");
client.global.clear("testPostBody");
%}

###

