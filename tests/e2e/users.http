### Variables
@baseUrl = http://localhost:8080
@userId = 550e8400-e29b-41d4-a716-446655440000

### Test 1: User registration with random data
POST {{baseUrl}}/sign-up
Content-Type: application/json

{
  "email": "test{{$timestamp}}@example.com",
  "username": "testuser{{$timestamp}}",
  "password": "password123",
  "first_name": "Test",
  "last_name": "User"
}

> {%
client.test("User registration should return 201", function() {
    client.assert(response.status === 201 || response.status === 409, "Expected status 201 or 409 (if user exists)");
});

if (response.status === 201) {
    client.test("Response should contain user data", function() {
        client.assert(response.body.id !== undefined, "User ID should be present");
        client.assert(response.body.email !== undefined, "Email should be present");
        client.assert(response.body.username !== undefined, "Username should be present");
        client.assert(response.body.password === undefined, "Password should not be returned");
    });
    
    client.global.set("registeredUserId", response.body.id);
    client.global.set("registeredUserEmail", response.body.email);
    client.global.set("registeredUsername", response.body.username);
}
%}

###

### Test 2: User login with registered user
POST {{baseUrl}}/sign-in
Content-Type: application/json

{
  "email": "test{{$timestamp}}@example.com",
  "password": "password123"
}

> {%
client.test("User login should return 200", function() {
    client.assert(response.status === 200, "Expected status 200");
});

client.test("Response should contain token and user data", function() {
    client.assert(response.body.token !== undefined, "Token should be present");
    client.assert(response.body.user !== undefined, "User data should be present");
    client.assert(response.body.user.email !== undefined, "Email should be present");
});

client.global.set("authToken", "Bearer " + response.body.token);
client.global.set("loggedUserId", response.body.user.id);
%}

###

### Test 3: Get user by ID
GET {{baseUrl}}/{{userId}}
Authorization: {{authToken}}

> {%
client.test("Get user by ID should return 200 or 404", function() {
    client.assert(response.status === 200 || response.status === 404, "Expected status 200 or 404");
});

if (response.status === 200) {
    client.test("Response should contain user data", function() {
        client.assert(response.body.id !== undefined, "User ID should be present");
        client.assert(response.body.username !== undefined, "Username should be present");
    });
}
%}

###

### Test 4: Update user profile with image
PUT {{baseUrl}}
Content-Type: multipart/form-data; boundary=boundary123
Authorization: {{authToken}}

--boundary123
Content-Disposition: form-data; name="user"
Content-Type: application/json

{
  "id": "{{loggedUserId}}",
  "first_name": "Updated",
  "last_name": "Name",
  "bio": "Updated bio for testing"
}
--boundary123
Content-Disposition: form-data; name="image"; filename="profile.jpg"
Content-Type: image/jpeg

[Binary image data would go here]
--boundary123--

> {%
client.test("Update profile should return 200 or 404", function() {
    client.assert(response.status === 200 || response.status === 404, "Expected status 200 or 404");
});

if (response.status === 200) {
    client.test("Response should contain updated data", function() {
        client.assert(response.body.first_name === "Updated", "First name should be updated");
        client.assert(response.body.last_name === "Name", "Last name should be updated");
    });
}
%}

###

### Test 5: Get user by ID
GET {{baseUrl}}/{{userId}}
Authorization: {{authToken}}

> {%
client.test("Get user by ID should return 200 or 404", function() {
    client.assert(response.status === 200 || response.status === 404, "Expected status 200 or 404");
});

if (response.status === 200) {
    client.test("Response should contain user data", function() {
        client.assert(response.body.id !== undefined, "User ID should be present");
        client.assert(response.body.username !== undefined, "Username should be present");
    });
}
%}

###

### Test 6: Search users
GET {{baseUrl}}/search?query=test
Authorization: {{authToken}}

> {%
client.test("Search users should return 200", function() {
    client.assert(response.status === 200, "Expected status 200");
});

client.test("Response should be an array", function() {
    client.assert(Array.isArray(response.body), "Response should be an array");
});
%}

###

### Test 7: Follow user
POST {{baseUrl}}/{{loggedUserId}}/follow/{{userId}}
Authorization: {{authToken}}

> {%
client.test("Follow user should return 202 or 400", function() {
    client.assert(response.status === 202 || response.status === 400, "Expected status 202 or 400");
});
%}

###

### Test 8: Unfollow user
DELETE {{baseUrl}}/{{loggedUserId}}/follow/{{userId}}
Authorization: {{authToken}}

> {%
client.test("Unfollow user should return 204 or 400", function() {
    client.assert(response.status === 204 || response.status === 400, "Expected status 204 or 400");
});
%}

###

### Test 9: Get user followers
GET {{baseUrl}}/{{userId}}/followers
Authorization: {{authToken}}

> {%
client.test("Get followers should return 200", function() {
    client.assert(response.status === 200, "Expected status 200");
});

client.test("Response should be an array", function() {
    client.assert(Array.isArray(response.body), "Response should be an array");
});
%}

###

### Test 10: Get user following
GET {{baseUrl}}/{{userId}}/following
Authorization: {{authToken}}

> {%
client.test("Get following should return 200", function() {
    client.assert(response.status === 200, "Expected status 200");
});

client.test("Response should be an array", function() {
    client.assert(Array.isArray(response.body), "Response should be an array");
});
%}

###

### Test 11: Delete user
DELETE {{baseUrl}}/{{userId}}
Authorization: {{authToken}}

> {%
client.test("Delete user should return 204 or 404", function() {
    client.assert(response.status === 204 || response.status === 404, "Expected status 204 or 404");
});
%}

###

### Test 12: Login with invalid credentials
POST {{baseUrl}}/sign-in
Content-Type: application/json

{
  "email": "test@example.com",
  "password": "wrongpassword"
}

> {%
client.test("Login with wrong password should return 401", function() {
    client.assert(response.status === 401, "Expected status 401");
});
%}

###

### Test 13: Register with invalid email
POST {{baseUrl}}/sign-up
Content-Type: application/json

{
  "email": "invalid-email",
  "username": "testuser2",
  "password": "password123",
  "first_name": "Test",
  "last_name": "User"
}

> {%
client.test("Register with invalid email should return 400", function() {
    client.assert(response.status === 400, "Expected status 400");
});
%}

###

### Test 14: Register with existing email
POST {{baseUrl}}/sign-up
Content-Type: application/json

{
  "email": "test@example.com",
  "username": "anothertestuser",
  "password": "password123",
  "first_name": "Another",
  "last_name": "User"
}

> {%
client.test("Register with existing email should return 409", function() {
    client.assert(response.status === 409, "Expected status 409");
});
%}

###

### Test 15: Access protected endpoint without token
GET {{baseUrl}}/profile

> {%
client.test("Access without token should return 401 or 200", function() {
    client.assert(response.status === 401 || response.status === 200, "Expected status 401 (if auth enabled) or 200 (if auth disabled)");
});
%}

###

### Test 16: CLEANUP - Delete registered user (if delete endpoint works)
DELETE {{baseUrl}}/users/{{registeredUserId}}
Authorization: {{authToken}}

> {%
client.test("Delete user should return 204 or 404", function() {
    client.assert(response.status === 204 || response.status === 404 || response.status === 403, 
                 "Expected status 204 (deleted), 404 (not found), or 403 (forbidden)");
});

if (response.status === 204) {
    client.log("✅ User successfully deleted: " + client.global.get("registeredUserEmail"));
} else if (response.status === 403) {
    client.log("⚠️ Delete forbidden - user will remain: " + client.global.get("registeredUserEmail"));
} else {
    client.log("⚠️ Could not delete user: " + client.global.get("registeredUserEmail"));
}

// Clear global variables
client.global.clear("registeredUserId");
client.global.clear("registeredUserEmail");
client.global.clear("registeredUsername");
client.global.clear("authToken");
client.global.clear("loggedUserId");
%}

###
