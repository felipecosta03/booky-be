### Variables
@baseUrl = http://localhost:8080
@userId = 550e8400-e29b-41d4-a716-446655440001

### Test 1: Create community with random data
# Este test crea una comunidad y guarda su ID para usar en tests posteriores
POST {{baseUrl}}/communities
Content-Type: application/json
Authorization: {{token}}

{
  "name": "Test Community {{$timestamp}}",
  "description": "A community created for testing purposes - {{$timestamp}}"
}

> {%
client.test("Create community should return 201", function() {
    client.assert(response.status === 201, "Expected status 201");
});

client.test("Response should contain community data", function() {
    client.assert(response.body.id !== undefined, "Community ID should be present");
    client.assert(response.body.name !== undefined, "Community name should be present");
    client.assert(response.body.name.includes("Test Community"), "Community name should contain 'Test Community'");
    client.assert(response.body.description !== undefined, "Description should be present");
    client.assert(response.body.date_created !== undefined, "Created by should be present");
});

// Guardar el ID de la comunidad creada para usar en tests posteriores
client.global.set("testCommunityId", response.body.id);
client.global.set("testCommunityName", response.body.name);
%}

###

### Test 2: Get community by ID (using ID from Test 1)
GET {{baseUrl}}/communities/{{testCommunityId}}
Authorization: {{token}}

> {%
client.test("Get community should return 200 or 404", function() {
    client.assert(response.status === 200 || response.status === 404, "Expected status 200 or 404");
});

if (response.status === 200) {
    client.test("Response should contain community data", function() {
        client.assert(response.body.id !== undefined, "Community ID should be present");
        client.assert(response.body.name !== undefined, "Community name should be present");
        client.assert(response.body.description !== undefined, "Description should be present");
    });
}
%}

###

### Test 3: Get all communities
GET {{baseUrl}}/communities
Authorization: {{token}}

> {%
client.test("Get all communities should return 200", function() {
    client.assert(response.status === 200, "Expected status 200");
});

client.test("Response should be an array", function() {
    client.assert(Array.isArray(response.body), "Response should be an array");
});
%}

###

### Test 4: Join community (using ID from Test 1)
POST {{baseUrl}}/communities/{{testCommunityId}}/join
Authorization: {{other_token}}

> {%
client.test("Join community should return 200 or 404", function() {
    client.assert(response.status === 200 || response.status === 404 || response.status === 409, "Expected status 200, 404, or 409");
});
%}

###

### Test 5: Get user communities
GET {{baseUrl}}/communities/user/{{userId}}
Authorization: {{token}}

> {%
client.test("Get user communities should return 200", function() {
    client.assert(response.status === 200, "Expected status 200");
});

client.test("Response should be an array", function() {
    client.assert(Array.isArray(response.body), "Response should be an array");
});
%}

###

### Test 6: Search communities
GET {{baseUrl}}/communities/search?q=test
Authorization: {{token}}

> {%
client.test("Search communities should return 200", function() {
    client.assert(response.status === 200, "Expected status 200");
});

client.test("Response should be an array", function() {
    client.assert(Array.isArray(response.body), "Response should be an array");
});
%}

###

### Test 7: Leave community (using ID from Test 1)
DELETE {{baseUrl}}/communities/{{testCommunityId}}/leave
Authorization: {{other_token}}

> {%
client.test("Leave community should return 200 or 404", function() {
    client.assert(response.status === 200 || response.status === 404, "Expected status 200 or 404");
});
%}

###

### Test 8: Create community without authentication
POST {{baseUrl}}/communities
Content-Type: application/json

{
  "name": "Unauthenticated Community",
  "description": "This should fail if auth is enabled"
}

> {%
client.test("Create community without auth should return 403 or 201", function() {
    client.assert(response.status === 403 || response.status === 201, "Expected status 403 (if auth enabled) or 201 (if auth disabled)");
});
%}

###

### Test 9: Create community with invalid data
POST {{baseUrl}}/communities
Content-Type: application/json
Authorization: {{token}}

{
  "name": "",
  "description": ""
}

> {%
client.test("Create community with invalid data should return 400", function() {
    client.assert(response.status === 400, "Expected status 400");
});
%}

###

### Test 10: Join non-existent community
POST {{baseUrl}}/communities/non-existent-id/join
Authorization: {{token}}

> {%
client.test("Join non-existent community should return 404", function() {
    client.assert(response.status === 404, "Expected status 404");
});
%}

###

### Test 11: Get created community by ID (verify it exists before cleanup)
GET {{baseUrl}}/communities/{{testCommunityId}}
Authorization: {{token}}

> {%
client.test("Get created community should return 200", function() {
    client.assert(response.status === 200, "Expected status 200");
});

if (response.status === 200) {
    client.test("Response should contain the created community", function() {
        client.assert(response.body.id === client.global.get("testCommunityId"), "Community ID should match");
        client.assert(response.body.name === client.global.get("testCommunityName"), "Community name should match");
        client.assert(response.body.member_count !== undefined, "Member count should be present");
        client.assert(response.body.member_count >= 1, "Member count should be at least 1 (admin)");
    });
}
%}

###

### Test 12: Try to delete community with different user (should fail)
# Este test verifica que solo el admin puede eliminar una comunidad
DELETE {{baseUrl}}/communities/{{testCommunityId}}
Authorization: {{other_token}}
# Intencionalmente sin Authorization header para simular otro usuario

> {%
client.test("Delete community without auth should return 401", function() {
    client.assert(response.status === 401, "Expected status 401 (unauthorized)");
});

client.log("üîí Verified: Community deletion requires authentication");
%}

###

### Test 13: CLEANUP - Delete created community
# Este test elimina la comunidad creada y todas sus relaciones (posts, comentarios, miembros)
# Solo el administrador (creador) puede eliminar la comunidad
DELETE {{baseUrl}}/communities/{{testCommunityId}}
Authorization: {{token}}

> {%
client.test("Delete community should return 204 or 404", function() {
    client.assert(response.status === 204 || response.status === 404, 
                 "Expected status 204 (deleted) or 404 (not found or no permissions)");
});

if (response.status === 204) {
    client.log("‚úÖ Community successfully deleted with all relations: " + client.global.get("testCommunityName"));
    client.test("Community deletion successful", function() {
        client.assert(true, "Community and all related data deleted successfully");
    });
} else if (response.status === 404) {
    client.log("‚ö†Ô∏è Could not delete community (not found or no permissions): " + client.global.get("testCommunityName"));
    client.test("Community deletion failed", function() {
        client.assert(response.status === 404, "Expected 404 for failed deletion");
    });
}

// Clear global variables
client.global.clear("testCommunityId");
client.global.clear("testCommunityName");
%}

###


